from typing import Optional
from pydantic import Field
from hyko_sdk.io import BaseModel
from hyko_sdk.metadata import MetaData, pmodel_to_ports

# Change Meta data here:#####################

name = "gpt-3.5-turbo-translator"
description = "OpenAI's GPT 3.5 Turbo Translation model (API)"
version = "1.0"
category = "OpenAi"
task = "Text Translation"

##############################################


# Change types of inputs and outputs here:#####################

# main inputs to the function like a prompt for gpt3. These values are dynamic in runtime.
class Inputs(BaseModel):
    original_text: str = Field(..., description="The text to be translated (4k tokens max context size)")


# runtime means when the prototype is generated and deployed for the user (ui and all)


# Parameters to the function like temperature for gpt3. These values are constant  n runtime
class Params(BaseModel):
    api_key: str = Field(..., description="OpenAI's API KEY")
    language: str = Field(default="French", description="Target language to translate to")
    max_tokens: Optional[int] = Field(default=None, description="Maximum number of tokens generated by the model")
    temperature: Optional[float] = Field(default=None, description="Model's temperature")
    top_p: Optional[float] = Field(default=None, description="Model's Top P")


# outputs of the function.
class Outputs(BaseModel):
    translated_text: str = Field(..., description="Translated text")


# Function metadata, should always be here

__meta_data__ = MetaData(
    name=name,
    description=description,
    version=version,
    category=category,
    inputs=pmodel_to_ports(Inputs), # type: ignore
    params=pmodel_to_ports(Params), # type: ignore
    outputs=pmodel_to_ports(Outputs), # type: ignore
    requires_gpu=False
)


if __name__ == "__main__":
    print(__meta_data__.json(indent=2))
