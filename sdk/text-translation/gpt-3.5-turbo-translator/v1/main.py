import openai
from pydantic import Field
from typing import Optional
from hyko_sdk import CoreModel, SDKFunction


func = SDKFunction(
    description="OpenAI's GPT 3.5 Turbo Translation model (API)",
    requires_gpu=False,
)

class Inputs(CoreModel):
    original_text: str = Field(..., description="The text to be translated (4k tokens max context size)")
    
class Params(CoreModel):
    api_key: str = Field(..., description="OpenAI's API KEY")
    language: str = Field(default="French", description="Target language to translate to")
    max_tokens: Optional[int] = Field(default=None, description="Maximum number of tokens generated by the model")
    temperature: Optional[float] = Field(default=None, description="Model's temperature")
    top_p: Optional[float] = Field(default=None, description="Model's Top P")

class Outputs(CoreModel):
    translated_text: str = Field(..., description="Translated text")

@func.on_execute
async def main(inputs: Inputs, params: Params):

    chat_completion = await openai.ChatCompletion.acreate(
        model="gpt-3.5-turbo",
        messages=[
            {
                "role": "system",
                "content": f"Translate to {params.language}",
            },
            {
                "role": "user",
                "content": inputs.original_text,
            },
        ],
        api_key=params.api_key,
        max_tokens=params.max_tokens,
        temperature=params.temperature,
        top_p=params.top_p,
    )

    completion: str = chat_completion.choices[0].message.content # type: ignore

    return Outputs(translated_text=completion)



